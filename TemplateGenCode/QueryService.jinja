using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using GD.Entity.Responsitories;
using GD.Data.Services.Common;
using GD.SDK.Data.EFService;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using GD.Entity.Tables;
using System.Threading;
using GD.Data.Services.Interface;

namespace GD.Data.Services
{
    public partial class QueryService : EfQuery<GDContext>, IQueryService
    {

      protected readonly ILogger<QueryService> _logger;
      private readonly IWorkContext _workContext;
      private readonly ICommonService _commonService;
      public QueryService(IServiceProvider serviceProvider, ILogger<QueryService> logger, IWorkContext workContext,
          ICommonService commonService) : base(serviceProvider)
      {
         _logger = logger;
         _workContext = workContext;
         _commonService = commonService;
      }

      {% for line in item -%}
      protected IQueryable<{{line.table}}> Filter({{line.table}} query, CancellationToken cancellationToken = default)
      {
         return dbContext.Set<{{line.table}}>()
                        .AsNoTracking()
                        .Where(e => 
                           {% for im in line.data -%}
                           {%-if im.idx==1 -%}
                              {%-if im.kdl != "string"-%}
                              (query.{{im.Column}} == default || e.{{im.Column}} == query.{{im.Column}})
                              {%-endif -%}
                              {%-if im.kdl == "string"-%}
                              (query.{{im.Column}} == default || e.{{im.Column}}.Contains(query.{{im.Column}}))
                              {%-endif -%}
                           {%-endif -%}
                           {%if im.idx > 1 %}
                              {%-if im.kdl != "string"-%}
                              &&(query.{{im.Column}} == default || e.{{im.Column}} == query.{{im.Column}})
                              {%-endif -%}
                              {%-if im.kdl == "string"-%}
                              &&(query.{{im.Column}} == default || e.{{im.Column}}.Contains(query.{{im.Column}}))
                              {%-endif -%}
                           {%endif %}   
                           {% endfor %}
                        )
                        .Select(x => x);
      }
      public async Task<{{line.table}}> GetModelAsync({{line.table}} query, CancellationToken cancellationToken = default)
      {
         return await dbContext.Set<{{line.table}}>()
                        .AsNoTracking()
                        .FirstOrDefaultAsync(e => 
                           {% for im in line.data -%}
                           {%-if im.idx==1 -%}
                              {%-if im.kdl != "string" and ("id" in im.Column.lower() or "code" in im.Column.lower())-%}
                              (query.{{im.Column}} == default || e.{{im.Column}} == query.{{im.Column}})
                              {%-endif -%}
                              {%-if im.kdl == "string" and "code" in im.Column.lower()-%}
                              (query.{{im.Column}} == default || e.{{im.Column}}.Contains(query.{{im.Column}}))
                              {%-endif -%}
                              {%-if im.kdl == "string" and "id" in im.Column.lower()-%}
                              (query.{{im.Column}} == default || e.{{im.Column}}.Contains(query.{{im.Column}}))
                              {%-endif -%}
                           {%-endif -%}
                           {%if im.idx > 1 -%}
                              {%-if im.kdl != "string" and ("id" in im.Column.lower() or "code" in im.Column.lower())-%}
                              &&(query.{{im.Column}} == default || e.{{im.Column}} == query.{{im.Column}})
                              {%-endif -%}
                              {%-if im.kdl == "string" and "code" in im.Column.lower()-%}
                              &&(query.{{im.Column}} == default || e.{{im.Column}}.Contains(query.{{im.Column}}))
                              {%-endif -%}
                              {%-if im.kdl == "string" and "id" in im.Column.lower()-%}
                              &&(query.{{im.Column}} == default || e.{{im.Column}}.Contains(query.{{im.Column}}))
                              {%-endif -%}
                           {%endif -%}   
                           {% endfor %},cancellationToken);
      }
      public async Task<List<{{line.table}}>> QueryListAsync({{line.table}} query, CancellationToken cancellationToken = default)
      {
         return await Filter(query, cancellationToken)
				.ToListAsync(cancellationToken);
      }
      public async Task<bool> ExistsAsync({{line.table}} query, CancellationToken cancellationToken = default)
      {
         return await dbContext.Set<{{line.table}}>()
                        .AsNoTracking()
                        .AnyAsync(e => 
                           {% for im in line.data -%}
                           {%-if im.idx==1 -%}
                              {%-if im.kdl != "string"-%}
                              (query.{{im.Column}} == default || e.{{im.Column}} == query.{{im.Column}})
                              {%-endif -%}
                              {%-if im.kdl == "string" and "code" in im.Column.lower()-%}
                              (query.{{im.Column}} == default || e.{{im.Column}}.Contains(query.{{im.Column}}))
                              {%-endif -%}
                              {%-if im.kdl == "string" and "id" in im.Column.lower()-%}
                              (query.{{im.Column}} == default || e.{{im.Column}}.Contains(query.{{im.Column}}))
                              {%-endif -%}
                           {%-endif -%}
                           {%if im.idx > 1 -%}
                              {%-if im.kdl != "string" and "id" in im.Column.lower()-%}
                              &&(query.{{im.Column}} == default || e.{{im.Column}} == query.{{im.Column}})
                              {%-endif -%}
                              {%-if im.kdl == "string" and "code" in im.Column.lower()-%}
                              &&(query.{{im.Column}} == default || e.{{im.Column}}.Contains(query.{{im.Column}}))
                              {%-endif -%}
                              {%-if im.kdl == "string" and "id" in im.Column.lower()-%}
                              &&(query.{{im.Column}} == default || e.{{im.Column}}.Contains(query.{{im.Column}}))
                              {%-endif -%}
                           {%endif -%}   
                           {% endfor %},cancellationToken);
      }

       {% endfor %}
    }
}